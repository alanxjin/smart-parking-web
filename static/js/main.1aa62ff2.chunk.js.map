{"version":3,"sources":["Components/Menu.js","Components/Home.js","Components/MyMeter.js","Components/Settings.js","App.js","serviceWorker.js","index.js","map.png"],"names":["App","this","props","activeMenuItem","handleMenuItemClick","Segment","attached","inverted","Menu","pointing","secondary","Item","name","active","onClick","Component","Home","state","slots","slotSelectedId","selectSlotbyId","slotId","setState","slotSelected","filter","slot","slotElements","forEach","push","key","id","Icon","Label","Card","color","Image","src","mapImage","Content","Header","Meta","className","Description","SlotCard","MyMeter","time","convertSecondToString","seconds","hour","String","Math","floor","padStart","minute","second","calculateFee","timeString","fee","Settings","increaseTime","preState","e","getContent","interval","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1aa62ff2.chunk.js","sourcesContent":["import React , { Component } from 'react';\n//import './Menu.css';\nimport { Menu, Segment } from 'semantic-ui-react';\n\nexport default class App extends Component{\n  \n    render() {\n      const { activeMenuItem, handleMenuItemClick} = this.props;\n      return (\n        <Segment attached inverted>\n          <Menu inverted pointing secondary>\n            <Menu.Item\n              name='home'\n              active={activeMenuItem === 'home'}\n              onClick={handleMenuItemClick}\n            />\n            <Menu.Item\n              name='my meter'\n              active={activeMenuItem === 'my meter'}\n              onClick={handleMenuItemClick}\n            />\n            <Menu.Item\n              name='settings'\n              active={activeMenuItem === 'settings'}\n              onClick={handleMenuItemClick}\n            />\n          </Menu>\n        </Segment>\n      )\n    }\n  \n}\n\n","import React , { Component } from 'react';\n\nimport { Segment, Card, Icon,Label,Image} from 'semantic-ui-react';\nimport mapImage from \"../map.png\"\n\nexport default class Home extends Component{\n    state = {\n        slots: [\n            {\"id\": \"slot1\", \"location\": {\"lat\": -34.397, \"lng\": 150.644}, \"availability\": 0},\n            {\"id\": \"slot2\", \"location\": {\"lat\": -35.648, \"lng\": 150.374}, \"availability\": 1},\n            {\"id\": \"slot3\", \"location\": {\"lat\": -36.239, \"lng\": 150.839}, \"availability\": 0},\n            {\"id\": \"slot4\", \"location\": {\"lat\": -37.397, \"lng\": 150.239}, \"availability\": 1}\n        ],\n        slotSelectedId:\"slot1\"\n    }\n    selectSlotbyId = (slotId) => {\n        this.setState({slotSelectedId:slotId});\n    }\n    render() {\n        const {slots, slotSelectedId} = this.state;\n        const slotSelected = slots.filter((slot)=> slot[\"id\"] === slotSelectedId)[0];\n        let slotElements = [];\n        slots.forEach((slot) => {\n            slotElements.push(<SlotCard key={slot[\"id\"]} slot={slot} selectSlotbyId={this.selectSlotbyId}/>);\n        })\n        return (\n            <Segment attached id=\"home\">\n                <div id=\"my-location\">\n                    <Icon name='location arrow' />\n                    <Label>lat: -34.397</Label> <Label>lng: 150.644</Label>\n                </div>\n                <div id=\"slot-info\">\n                    <div id=\"slots\"> \n                        {slotElements}\n                    </div>\n                    <div id=\"slot-detail\">\n                        <Card color={slotSelected[\"availability\"] === 1? \"green\": \"red\"}>\n                            <Image src={mapImage}></Image>\n                            <Card.Content>\n                                <Card.Header><Icon name='product hunt'/>{slotSelected[\"id\"]}</Card.Header>\n                                <Card.Meta>\n                                    <span className='location'>{\"lat: \" + slotSelected[\"location\"][\"lat\"]+ \", lng: \"+slotSelected[\"location\"][\"lng\"]}</span>\n                                </Card.Meta>\n                                <Card.Description>\n                                    Availability: {slotSelected[\"availability\"] === 1? \"Empty\": \"Occuppied\"}\n                                </Card.Description>\n                            </Card.Content>\n                        </Card>\n                    </div>\n                </div>\n            </Segment>\n        )\n    }\n  \n}\n\n\nconst SlotCard = (props) => {\n    \n    return (\n        <Card onClick={() => props.selectSlotbyId(props.slot[\"id\"])} color={props.slot[\"availability\"] === 1? \"green\": \"red\"}>\n            <Card.Content>\n            <Card.Header><Icon name='product hunt' />{props.slot[\"id\"]}</Card.Header>\n            <Card.Meta>\n                <span className='location'>{\"lat: \" + props.slot[\"location\"][\"lat\"]+ \", lng: \"+props.slot[\"location\"][\"lng\"]}</span>\n            </Card.Meta>\n            \n            </Card.Content>\n        </Card>\n    )\n}","import React , { Component } from 'react';\nimport { Segment, Card, Image, Icon} from 'semantic-ui-react';\nimport mapImage from \"../map.png\"\n\nexport default class MyMeter extends Component{\n    state={\n        slotSelected: {\"id\": \"slot3\", \"location\": {\"lat\": -35.648, \"lng\": 150.374}},\n        time: 0\n    }\n\n   \n    convertSecondToString = (seconds)=>{\n        const hour = String(Math.floor(seconds / 3600)).padStart(2,'0');\n        const minute = String(Math.floor(seconds % 3600 / 60)).padStart(2,'0');\n        const second= String(Math.floor(seconds % 3600 % 60)).padStart(2,'0');\n\n        return `${hour}:${minute}:${second}`;\n    }\n\n    calculateFee = (seconds) => {\n        const rate = 0.02;\n        return rate * seconds\n    }\n   \n\n    render() {\n        \n        const {slotSelected} = this.state;\n        const timeString = this.convertSecondToString(this.props.time);\n        const fee = this.calculateFee(this.props.time);\n        return (\n            <Segment attached id=\"my-meter\">\n                <div id=\"slot-detail\">\n                    <Card color={slotSelected[\"availability\"] === 1? \"green\": \"red\"}>\n                        <Image src={mapImage}></Image>\n                        <Card.Content>\n                            <Card.Header><Icon name='product hunt'/>{slotSelected[\"id\"]}</Card.Header>\n                            <Card.Meta>\n                                <span className='location'>{\"lat: \" + slotSelected[\"location\"][\"lat\"]+ \", lng: \"+slotSelected[\"location\"][\"lng\"]}</span>\n                            </Card.Meta>\n                            <Card.Description>\n                                <p>Parking Time: {timeString}</p>\n                                <p>Fee: ${fee}</p>\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                </div>\n            </Segment>\n        )\n    }\n  \n}\n\n\n","import React , { Component } from 'react';\n\nimport { Segment } from 'semantic-ui-react';\n\nexport default class Settings extends Component{\n    render() {\n     \n      return (\n        <Segment attached >\n            Settings\n        </Segment>\n      )\n    }\n  \n}\n\n","import React , { Component } from 'react';\nimport './App.css';\nimport Menu from './Components/Menu';\nimport Home from './Components/Home';\nimport MyMeter from './Components/MyMeter';\nimport Settings from './Components/Settings';\n\nclass App extends Component{\n    state = { \n        activeMenuItem: 'home', // home, my meter, settings\n        time: 0 // This will be fetched from database \n    }\n    componentDidMount(){\n        this.interval = setInterval(this.increaseTime, 1000)\n    }\n    increaseTime = () => { \n        this.setState((preState)=> ({time: preState.time +1}))\n    }\n\n    handleMenuItemClick = (e, { name }) => this.setState({ activeMenuItem: name })\n    \n    getContent = (activeMenuItem) => {\n        switch(activeMenuItem) {\n            case 'home':\n                return <Home/>\n            case 'my meter':\n                return <MyMeter time={this.state.time}/>\n            default:\n                return <Settings/>;\n          }\n    }\n\n    render() {\n        const {activeMenuItem} = this.state;\n        return (\n            <div id=\"App\">\n            <Menu attached activeMenuItem={activeMenuItem} handleMenuItemClick={this.handleMenuItemClick}/>\n            {this.getContent(activeMenuItem)}\n            </div>\n        )\n    }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/map.97cc4c06.png\";"],"sourceRoot":""}